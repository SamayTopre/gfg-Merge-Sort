class Solution
{
    public:
    void merge(int arr[], int l, int m, int r)
    {
int mid=m;
int len1=mid-l+1;
int len2=r-mid;
int *arr1=new int[len1];
int *arr2=new int[len2];

int mainindx=l;
for(int i=0;i<len1;i++)
{
    arr1[i]=arr[mainindx];
    mainindx++;
}
mainindx=mid+1;
for(int i=0;i<len2;i++)
{
    arr2[i]=arr[mainindx];
    mainindx++;
}

int indx1=0;
int indx2=0;
mainindx=l;
while(indx1<len1 && indx2<len2)
{
    
   if(arr1[indx1]<arr2[indx2])
   {
       arr[mainindx++]=arr1[indx1++];
      
   }
   else
   {
       arr[mainindx++]=arr2[indx2++];
        
   
   }
}
while(indx1<len1)
{
          arr[mainindx++]=arr1[indx1++];
}
while(indx2<len2)
{
    arr[mainindx++]=arr2[indx2++];
}


    }
    public:
    void mergeSort(int arr[], int l, int r)
    {
if(l>=r)
{
    return;
}
int mid=l+(r-l)/2;
mergeSort(arr,l,mid);
mergeSort(arr,mid+1,r);
merge(arr,l,mid,r);



    }
};
